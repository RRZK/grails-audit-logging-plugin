import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
        //TODO classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        //TODO classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

version project.file("../version.txt").text.trim()
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "org.asciidoctor.convert"
apply plugin: 'com.jfrog.bintray'

// Used for publishing to central repository, remove if not needed
// apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/grailsCentralPublishing.gradle'
// apply from:'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/bintrayPublishing.gradle'

ext {
    grailsVersion = project.grailsVersion
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    provided "org.springframework.boot:spring-boot-starter-logging"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.grails:grails-core"
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    provided "org.grails:grails-web-boot"
    provided "org.grails:grails-logging"
    provided "org.grails:grails-plugin-rest"
    provided "org.grails:grails-plugin-databinding"
    provided "org.grails:grails-plugin-i18n"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-url-mappings"
    provided "org.grails:grails-plugin-interceptors"
    provided "org.grails.plugins:cache"
    provided "org.grails.plugins:async"
    provided "org.grails.plugins:scaffolding"
    provided "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
}

bootRun {
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

grailsPublish {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    githubSlug = 'robertoschwald/grails-audit-logging-plugin'
    license {
        name = project.hasProperty('license') ? [project.license] : ['Apache-2.0']
    }
    title = "Grails Audit-Logging Plugin"
    desc = "Grails Audit-Logging Plugin for Grails 4.0.x"
    developers = [robertoschwald:"Robert Oschwald", longwa:"Aaron Long", elkr:"Elmar Kretzer"]
}

assets {
    packagePlugin = true
}

// Needed for org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6
// See https://github.com/asciidoctor/asciidoctorj/issues/415
/*TODO asciidoctorj {
    version = '1.5.4'
}*/

static String buildDate() {
    def df = new SimpleDateFormat("yyyy-MM-dd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

asciidoctorj {
    version = '1.5.4'
}

asciidoctor {
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
    outputDir new File(buildDir, 'docs')
    //TODO backends 'html5', 'pdf', 'epub3'
    attributes 'experimental': 'true',
        'source-highlighter': 'coderay',
        'compat-mode': 'true',
        toc: 'left',
        icons: 'font',
        setanchors: 'true',
        idprefix: '',
        idseparator: '-',
        toc2: '',
        numbered: '',
        version: project.version,
        groupId: project.group,
        artifactId: project.name,
        revnumber: project.version,
        revdate: buildDate()
}

task docs(dependsOn: 'asciidoctor') {
    doLast {
        File dir = new File(buildDir, 'docs')
        dir.mkdirs()

        //TODO
        /* ['pdf', 'epub'].each { String ext ->
            File f = new File(dir, 'index.' + ext)
            if (f.exists()) {
                f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
            }
        }*/

        new File(buildDir, 'docs/ghpages.html') << file('src/docs/templates/index.tmpl').text
                .replaceAll("@VERSION@", project.version).replaceAll("@DOCDATE@", buildDate())

        copy {
            from 'src/docs'
            into new File(buildDir, 'docs').path
            include '**/*.png'
        }
    }
}
